/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.Product;
import Business.ProductCatalog;
import java.awt.CardLayout;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Malick
 */
public class TableJPanel extends javax.swing.JPanel {

    private JPanel MainJPanel2;
    private ProductCatalog productCatalog;
    private ProductCatalog mainCatalogBackup;
    private ProductCatalog tempArray;
    String type;

    TableJPanel(JPanel MainJPanel2, ProductCatalog productCatalog,String type) {
        initComponents();
        this.type = type;
        if(type.equals("Customer")){
         btnCreate.setEnabled(false);
         DeleteBtn.setEnabled(false);
        }
        this.MainJPanel2 = MainJPanel2;
        this.productCatalog = productCatalog;
        mainCatalogBackup = productCatalog;
        tempArray = new ProductCatalog();
        populateTable();

    }

    private void populateTable() {

        DefaultTableModel dtm = (DefaultTableModel) tblAccts.getModel();
        dtm.setRowCount(0);
        for (Product product : productCatalog.getProductCatalog()) {
            Object[] row = new Object[5];
            row[0] = product;
            row[1] = product.getModelNumber();
            row[2] = product.getVendorName();
            row[3] = product.getCeilingPrice();
            row[4] = product.getProductDescribtion();
            dtm.addRow(row);

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        TableJPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAccts = new javax.swing.JTable();
        btnCreate = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        labProRec = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        productNameSearch = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        productVendorSearch = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        productDescriptionSearch = new javax.swing.JTextField();
        priceHigh = new javax.swing.JRadioButton();
        priceLow = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        productSearchButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        DeleteBtn = new javax.swing.JButton();

        TableJPanel.setBackground(new java.awt.Color(153, 204, 255));
        TableJPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblAccts.setBackground(new java.awt.Color(204, 255, 204));
        tblAccts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Model No", "Vendor Name", "Price", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblAccts);
        if (tblAccts.getColumnModel().getColumnCount() > 0) {
            tblAccts.getColumnModel().getColumn(0).setResizable(false);
            tblAccts.getColumnModel().getColumn(1).setResizable(false);
            tblAccts.getColumnModel().getColumn(2).setResizable(false);
            tblAccts.getColumnModel().getColumn(3).setResizable(false);
            tblAccts.getColumnModel().getColumn(4).setResizable(false);
        }

        TableJPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 61, 550, 140));

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });
        TableJPanel.add(btnCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 210, 70, 30));

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });
        TableJPanel.add(btnView, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 210, 80, 30));

        btnBack.setText("< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        TableJPanel.add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 90, 40));

        labProRec.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        labProRec.setText("Product Records");
        TableJPanel.add(labProRec, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, -1, -1));

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("Product Name");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 14, -1, -1));

        productNameSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productNameSearchActionPerformed(evt);
            }
        });
        jPanel1.add(productNameSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 11, 153, -1));

        jLabel4.setText("Vendor Name");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 65, -1, -1));
        jPanel1.add(productVendorSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 62, 153, -1));

        jLabel5.setText("Product Description");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 121, -1, -1));

        productDescriptionSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productDescriptionSearchActionPerformed(evt);
            }
        });
        jPanel1.add(productDescriptionSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 115, 153, -1));

        buttonGroup1.add(priceHigh);
        priceHigh.setText("High");
        jPanel1.add(priceHigh, new org.netbeans.lib.awtextra.AbsoluteConstraints(276, 153, -1, -1));

        buttonGroup1.add(priceLow);
        priceLow.setText("Low");
        priceLow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceLowActionPerformed(evt);
            }
        });
        jPanel1.add(priceLow, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 153, -1, -1));

        jLabel6.setText("Price");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 157, -1, -1));

        TableJPanel.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 350, 203));

        jLabel1.setText("Search Critiria");
        TableJPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 228, 81, -1));

        productSearchButton.setText("Search");
        productSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productSearchButtonActionPerformed(evt);
            }
        });
        TableJPanel.add(productSearchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 300, -1, 85));

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        TableJPanel.add(refreshButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 10, 100, 40));

        DeleteBtn.setText("Delete");
        DeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnActionPerformed(evt);
            }
        });
        TableJPanel.add(DeleteBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 210, 100, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TableJPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(TableJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 24, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        MainJPanel2.remove(this);
        CardLayout layout = (CardLayout) MainJPanel2.getLayout();
        layout.previous(MainJPanel2);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        CreateJPanel panel = new CreateJPanel(MainJPanel2, productCatalog);
        MainJPanel2.add("CreateJPanel", panel);
        CardLayout layout = (CardLayout) MainJPanel2.getLayout();
        layout.next(MainJPanel2);

// TODO add your handling code here:
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
  
         int selectedRow = tblAccts.getSelectedRow(); 
           if (selectedRow < 0) {
                
               JOptionPane.showMessageDialog(null, "Please select a row from table to view details", "Warning", JOptionPane.WARNING_MESSAGE);
           }
           else {
               Product product = (Product) tblAccts.getValueAt(selectedRow, 0);
               ViewJPanel panel = new ViewJPanel(MainJPanel2, product, type);
               MainJPanel2.add("ViewJPanel", panel);
               CardLayout layout = (CardLayout) MainJPanel2.getLayout();
               layout.next(MainJPanel2); 
           }
        

        
//        ViewJPanel panel = new ViewJPanel(MainJPanel2, productCatalog);
//        MainJPanel2.add("ViewJPanel", panel);
//        CardLayout layout = (CardLayout) MainJPanel2.getLayout();
//        layout.next(MainJPanel2);

// TODO add your handling code here:
    }//GEN-LAST:event_btnViewActionPerformed

    private void productNameSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productNameSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productNameSearchActionPerformed

    private void productDescriptionSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productDescriptionSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productDescriptionSearchActionPerformed

    private void productSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productSearchButtonActionPerformed
        String productNameSearch = this.productNameSearch.getText();

        String productVendorSearch = this.productVendorSearch.getText();
        String productDescription = this.productDescriptionSearch.getText();
        if (productNameSearch.equals("") && productVendorSearch.equals("") && productDescription.equals("")) {
            sortByAscending();
            populateTable();
            return;
        } else {

        productCatalog = new ProductCatalog();
        if (!productNameSearch.equals("") && !productVendorSearch.equals("") && !productDescription.equals("")) {
            for (Product d : mainCatalogBackup.getProductCatalog()) {
                if (d.getProductName().toLowerCase().equals(productNameSearch.toLowerCase())
                        && d.getVendorName().toLowerCase().equals(productVendorSearch.toLowerCase())
                        && d.getProductDescribtion().toLowerCase().contains(productDescription.toLowerCase())) {
                    productCatalog.getProductCatalog().add(d);
                }
            }
            sortByAscending();
            populateTable();
            return;
        }

        if (!productNameSearch.equals("") && !productVendorSearch.equals("")) {
            for (Product d : mainCatalogBackup.getProductCatalog()) {
                if (d.getProductName().toLowerCase().equals(productNameSearch.toLowerCase())
                        && d.getVendorName().toLowerCase().equals(productVendorSearch.toLowerCase())) {
                    productCatalog.getProductCatalog().add(d);
                }
            }
            sortByAscending();
            populateTable();
            return;
        }

        if (!productVendorSearch.equals("") && !productDescription.equals("")) {
            for (Product d : mainCatalogBackup.getProductCatalog()) {
                if (d.getProductName().toLowerCase().equals(productNameSearch.toLowerCase())
                        && d.getVendorName().toLowerCase().equals(productVendorSearch.toLowerCase())
                        && d.getProductDescribtion().toLowerCase().contains(productDescription.toLowerCase())) {
                    productCatalog.getProductCatalog().add(d);
                }
            }
            sortByAscending();
            populateTable();
            return;
        }

        if (!productNameSearch.equals("") && !productDescription.equals("")) {
            for (Product d : mainCatalogBackup.getProductCatalog()) {
                if (d.getProductName().toLowerCase().equals(productNameSearch.toLowerCase())
                        && d.getProductDescribtion().toLowerCase().contains(productDescription.toLowerCase())) {
                    productCatalog.getProductCatalog().add(d);
                }
            }
            sortByAscending();
            populateTable();
            return;
        }
        if (!productNameSearch.equals("")) {
            for (Product d : mainCatalogBackup.getProductCatalog()) {
                if (d.getProductName().toLowerCase().equals(productNameSearch.toLowerCase())) {
                    productCatalog.getProductCatalog().add(d);
                }
            }
            sortByAscending();
            populateTable();
            return;
        }
        if (!productDescription.equals("")) {
            for (Product d : mainCatalogBackup.getProductCatalog()) {
                if (d.getProductDescribtion().toLowerCase().contains(productDescription.toLowerCase())) {
                    productCatalog.getProductCatalog().add(d);
                }
            }
            sortByAscending();
            populateTable();
            return;
        }

        if (!productVendorSearch.equals("")) {
            for (Product d : mainCatalogBackup.getProductCatalog()) {
                if (d.getVendorName().toLowerCase().equals(productVendorSearch.toLowerCase())) {
                    productCatalog.getProductCatalog().add(d);
                }
            }
sortByAscending();
            populateTable();

            return;
        }
        }

    }//GEN-LAST:event_productSearchButtonActionPerformed

    public void sortByAscending() {
        if (priceLow.isSelected()) {
            Collections.sort(productCatalog.getProductCatalog(), Product.ascendingOrder);
        } else if(priceHigh.isSelected()){
            Collections.sort(productCatalog.getProductCatalog(), Product.descendingOrder);
        }
    }
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        productCatalog = mainCatalogBackup;
        populateTable();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void priceLowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceLowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceLowActionPerformed

    private void DeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnActionPerformed
       int selectedRow = tblAccts.getSelectedRow();
            if (selectedRow >=0){
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to delete the product details", "Warning", dialogButton);
                if (dialogResult == JOptionPane.YES_OPTION){
                    Product product = (Product) tblAccts.getValueAt(selectedRow, 0);
                    productCatalog.deleteProduct(product);
                    populateTable();
                     
                }
                
                
                
            }
            else{
                JOptionPane.showMessageDialog(null, "Please select a row from table to delete", "Warning", JOptionPane.WARNING_MESSAGE);
                
            }
    }//GEN-LAST:event_DeleteBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DeleteBtn;
    private javax.swing.JPanel TableJPanel;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnView;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labProRec;
    private javax.swing.JRadioButton priceHigh;
    private javax.swing.JRadioButton priceLow;
    private javax.swing.JTextField productDescriptionSearch;
    private javax.swing.JTextField productNameSearch;
    private javax.swing.JButton productSearchButton;
    private javax.swing.JTextField productVendorSearch;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTable tblAccts;
    // End of variables declaration//GEN-END:variables

}
